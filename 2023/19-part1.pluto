local data = [[px{a<2006:qkq,m>2090:A,rfg}
pv{a>1716:R,A}
lnx{m>1548:A,A}
rfg{s<537:gd,x>2440:R,A}
qs{s>3448:A,lnx}
qkq{x<1416:A,crn}
crn{x>2662:A,R}
in{s<1351:px,qqz}
qqz{s>2770:qs,m<1801:hdj,R}
gd{a>3333:R,R}
hdj{m>838:A,pv}

{x=787,m=2655,a=1222,s=2876}
{x=1679,m=44,a=2067,s=496}
{x=2036,m=264,a=79,s=2244}
{x=2461,m=1339,a=466,s=291}
{x=2127,m=1623,a=2188,s=1013}]]

local [data_instructions, data_parts] = data:split("\n\n")

local instructions = {}
data_instructions:split("\n"):foreach(function(line)
    local arr = line:gsub("}", ""):split("{")
    instructions[arr[1]] = arr[2]:split(","):map(function(ins)
        local insarr = ins:split(":")
        if #insarr == 1 then
            return { "true", ins }
        end
        return insarr
    end)
end)

local parts = data_parts:split("\n"):map(|x| -> load("return "..x)()) -- if it quacks like a table...

local function check_condition(condition, part)
    if condition == "true" then return true end
    local arr = condition:split("<")
    if #arr == 2 then
        return part[arr[1]] < tonumber(arr[2])
    end
    arr = condition:split(">")
    return part[arr[1]] > tonumber(arr[2])
end

table.reduce = function(t, f)
    local a = 0
    for t as v do
        a = f(a, v)
    end
    return a
end

print(parts:reduce(function(accum, part)
    local routine = "in"
    while routine ~= "A" and routine ~= "R" do
        for instructions[routine] as instruction do
            if check_condition(instruction[1], part) then
                routine = instruction[2]
                break
            end
        end
    end
    if routine == "A" then
        accum += part:reduce(|a, b| -> a + b)
    end
    return accum
end))
