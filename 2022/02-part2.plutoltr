local data = [[A Y
B X
C Z]]

enum begin
    ROCK = 0,
    PAPER,
    SCISSORS
end

enum begin
    WIN = 6,
    TIE = 3,
    LOSE = 0
end

local function match_result(them, outcome)
    if outcome == WIN then
        return (them + 1) % 3
    end
    if outcome == TIE then
        return them
    end
    return (them + 2) % 3
end

map_opponent_choice = |c| -> switch c do
    case "A" -> ROCK
    case "B" -> PAPER
    case "C" -> SCISSORS
end

map_desired_outcome = |c| -> switch c do
    case "X" -> LOSE
    case "Y" -> TIE
    case "Z" -> WIN
end

table.reduce = function(t, f)
    local a = 0
    for t as v do
        a = f(a, v)
    end
    return a
end

data:split("\n"):map(function(line)
    line:split(" ") -> arr
    arr[1] |> map_opponent_choice -> opponent_choice
    arr[2] |> map_desired_outcome -> desired_outcome
    return (match_result(opponent_choice, desired_outcome) + 1) + desired_outcome
end):reduce(|a, b| -> a + b) |> print
